#! /usr/bin/env python
# -*- coding: utf-8 -*-

# test.poptest.py

import unittest

from . import *

import sys

class ProveSuite(unittest.TestSuite):
	def __init__(self, tests=(), name=None):
		unittest.Suit.__init__(self, tests)
		self._name = name

	def getShortDescription(self):
		return self.name or self.__repr__()

	def __repr__(self):
		 return "<%s tests:%d>" % (_strclass(self.__class__), self.countTestCases())

class ProveTextResult(unittest.TestResult):
	""" Test Result class to print test results based on a suite level

	Create a single result object per ProveSuite passing the output stream, suite description,
	and the verbosity.
	"""
	def __init__(self, stream, description, verbosity=1):
		""" Create a ProveTextRunner instance"""
		self.description = description
		self.stream = stream
		self.verbosity = verbosity


class Prove


class SuiteRunner():

	def __init__(self, stream=sys.stderr):
		self.suites = []
		self.results = []
		self.tests_ran = 0
		self.passed = 0
		self.failed = 0
		self.stream = stream

	def run(self):
		self.addAllSuites()
		self.runAllSuites()

	def addSuite(self, suite=None, suites=None):
		if (suite != None):
			self.suites.append(suite)
		if (suites != None):
			self.suites.extend(suites)

	def addAllSuites(self):
		""" Create a list of poptest.ProveSuite's """
		self.addTests(game_tests.getAllTests())
		self.addTests(world_tests.getAllTests())
		self.addTests(object_tests.getAllTests())
		self.addTests(house_tests.getAllTests())
		self.addTests(native_tests.getAllTests())

	def runAllSuites(self):
		for suite in self.suites:
			result = suite.run()
			suite_description = suite.getShortDescription()
			self.results.append(result)
			self.printResult(result, suite_name)

	def printResult(self, result, suite_name):
		str = suite_name
		self.stream.writeln('')


def runAllTests():
	runner = SuiteRunner()
	result = runner.runAllSuites()
	print result
	return result



